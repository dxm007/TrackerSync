//=================================================================================================
//=================================================================================================
//
// Copyright (c) 2012 Dennis Mnuskin
//
// This file is part of TrackerSync application.
//
// This source code is distributed under the MIT license.  For full text, see
// http://www.opensource.org/licenses/mit-license.php Same text is found in LICENSE.txt file which
// is located in root directory of the project.
//
//=================================================================================================
//=================================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace TrackerSync.Engine
{
    /// <summary>
    /// Base synchronizer action class. Synchronizer actions are generated by the SyncEngine when
    /// it calculates the work that needs to take place in order to synchronize the two sources.
    /// </summary>
    public abstract class SyncAction
    {
        /// <summary>
        /// To be invoked when the action is to be executed.
        /// </summary>
        public abstract void Run();

        /// <summary>
        /// Constructs a new instance of SyncAction class.
        /// </summary>
        /// <param name="source">Tracker source object on which the action is to operate</param>
        /// <param name="issue">Issue that is associated with the action</param>
        protected SyncAction( Sources.ISource    source,
                              Data.Issue         issue   )
        {
            this.Source = source;
            this.Issue = issue;
        }

        /// <summary>
        /// Gets a tracker source object on which the action is to operate
        /// </summary>
        protected Sources.ISource Source { get; private set; }

        /// <summary>
        /// Gets an issue that is associated with the action
        /// </summary>
        protected Data.Issue Issue { get; private set; }
    }


    /// <summary>
    /// Synchronizer action which marks an issue as being closed
    /// </summary>
    public class CloseIssueSyncAction : SyncAction
    {
        /// <summary>
        /// Constructs a new instance of CloseIssueSyncAction
        /// </summary>
        /// <param name="source">Tracker source object on which the action is to operate</param>
        /// <param name="issue">Issue that is to be closed</param>
        public CloseIssueSyncAction( Sources.ISource    source,
                                     Data.Issue         issue   ) : base( source, issue ) {}

        /// <inheritdoc/>
        public override void Run()
        {   
            this.Source.CloseIssue( this.Issue );
        }
    }


    /// <summary>
    /// Synchronizer action which adds a new issue to a tracker source
    /// </summary>
    public class AddIssueSyncAction : SyncAction
    {
        /// <summary>
        /// Constructs a new instance of AddIssueSyncAction
        /// </summary>
        /// <param name="source">Tracker source object on which the action is to operate</param>
        /// <param name="issue">Issue that is to be added to the source</param>
        public AddIssueSyncAction( Sources.ISource  source,
                                   Data.Issue       issue   ) : base( source, issue ) {}

        /// <inheritdoc/>
        public override void Run()
        {
            this.Source.AddIssue( this.Issue );
        }
    }


    /// <summary>
    /// Synchronizer action which updates an existing issue on the tracker source
    /// </summary>
    public class UpdateIssueSyncAction : SyncAction
    {
        /// <summary>
        /// Constructs a new instance of UpdateIssueSyncAction
        /// </summary>
        /// <param name="source">Tracker source object on which the action is to operate</param>
        /// <param name="issue">Issue that is to be updated</param>
        /// <param name="fieldsToUpdate"></param>
        public UpdateIssueSyncAction( Sources.ISource       source,
                                      Data.Issue            issue,
                                  Data.IssueFieldId     fieldsToUpdate )
                : base( source, issue )
        {
            _fieldsToUpdate = fieldsToUpdate;
        }

        /// <inheritdoc/>
        public override void Run()
        {
            this.Source.UpdateIssue( this.Issue, _fieldsToUpdate );
        }


        private Data.IssueFieldId   _fieldsToUpdate;
    }
}
